
[General]
network = DaisyChainLike # CentralSwitch
total-stack = 2MiB
tkenv-plugin-path = ../../../etc/plugins

#
# Setup Logging
#
**.vector-recording = true
**.scalar-recording = true

#record-eventlog = true
#debug-on-errors = true

# set log levels
# values off, fatal, error, warn, info, detail, debug, trace
**.cmdenv-log-level = info


# Erzeuge einfachen Traffic mit UDPBasicApp 
#
# Wenn man die Paket kein genug macht, dann entspricht der Traffic schon
# sehr dem Layer 2 Traffic. Kein Retransmission etc.
#
# Sehr einfache Vorgehensweise. 
# Auf jedem Knonten gibt es ein UPDBaseApp die alles über Port 1000 empfängt.
# Dies ist die App 0.
# Alle Anwendungen schicken an diesen Port
# Jede App, die was sendet hat ihren eigenen Port, der auf 1001 für App 1 startet.

# Auf jeden Knoten laufen erstmal 10 Apps, werden aber nicht alle genutzt.

**.queue.queueLength.result-recording-modes = true
**.queue.queueLength.statistic-recording = true

# Verteilung der Zufallszahlen, bei den APP Modulen
# - Jede App Instanz hat zwei local RNG.
#   RNG 0 für die Zeit
#   RNG 1 für die Paketgroessen
num-rngs = 10      # Anzahl Phy. RNGs
**.M.**.rng-0     = 0
**.M.**.rng-1     = 1
**.VT.**.rng-0    = 2
**.VT.**.rng-1    = 3
**.Ext1.**.rng-0  = 4
**.Ext1.**.rng-1  = 5
**.Ext2.**.rng-0  = 6
**.Ext2.**.rng-1  = 7

# Fuehre mehrere Runs durch
repeat = 20  # Für jeden Run werden die RNGs mit der Run Nummer initialisiert.
sim-time-limit = 2s

# **.udpApp[0] ist auf allen Hosts ein Empfänger auf Port 1000
# Alle Sender schicken an dieses Port

**.udpApp[0].typename      		= "UDPSink"
**.udpApp[*].typename      		= "UDPBasicApp"     # default setting

**.udpApp[*].destPort      		= 1000
**.udpApp[0].messageLength 		= 0  # Init Wert 
**.udpApp[0].sendInterval 		= 0  # Init Wert 
**.udpApp[0].startTime			= 0  # Init Wert 
**.udpApp[0].localPort 			= 1000


#
# K Matrix
#


**.udpApp[*].startTime 			= 20ms
**.udpApp[*].sendInterval 		=  1ms


# Umrechnung Mbps in Byte / ms (Nutze Fragmentierung von UPD und sendInterval = 1 ms aus
#
#  8Mbps 	= 1    MByte/ s = 1000  Byte/ms
# 16Mbps 	= 2    MByte/ s = 2000  Byte/ms
# 24Mbps 	= 3    MByte/ s = 3000  Byte/ms 
# 30Mbps 	= 3,75 MByte/s  = 3750  Byte/ms
# 44Mbps 	= 5,5  MByte/s  = 5500  Byte/ms
# 48Mbps 	= 6    MByte/s  = 6000  Byte/ms
# 52Mbps 	= 6,5  MByte/s  = 6500  Byte/ms


#
# Traffic den Module M erzeugt
#

# Test, Berechne Übertragungszeit für 1 Paket und Test es
*.M.numUdpApps 			   		= 5
*.M.udpApp[1].localPort 		= 1001
*.M.udpApp[2].localPort 		= 1002
*.M.udpApp[3].localPort 		= 1003
*.M.udpApp[4].localPort 		= 1004

*.M.udpApp[1].destAddresses = "R1" 
*.M.udpApp[1].messageLength = 3750Byte  # MTU 1500 Byte - 8 Byte UDP Header - 20 Byte IP Header ergibt maximalen Frame

*.M.udpApp[2].destAddresses = "R2" 
*.M.udpApp[2].messageLength = 3750Byte

*.M.udpApp[3].destAddresses = "A" 
*.M.udpApp[3].messageLength = 1000Byte

*.M.udpApp[4].destAddresses = "HU1" 
*.M.udpApp[4].messageLength = 3000Byte

*.TV.numUdpApps 			   		= 5
*.TV.udpApp[1].localPort 		= 1001
*.TV.udpApp[2].localPort 		= 1002
*.TV.udpApp[3].localPort 		= 1003
*.TV.udpApp[4].localPort 		= 1004

*.TV.udpApp[1].destAddresses = "R1" 
*.TV.udpApp[1].messageLength = 2000Byte  # MTU 1500 Byte - 8 Byte UDP Header - 20 Byte IP Header ergibt maximalen Frame

*.TV.udpApp[2].destAddresses = "R2" 
*.TV.udpApp[2].messageLength = 2000Byte

*.TV.udpApp[3].destAddresses = "A" 
*.TV.udpApp[3].messageLength = 1000Byte

*.TV.udpApp[4].destAddresses = "HU2" 
*.TV.udpApp[4].messageLength = 2000Byte

*.Ext.numUdpApps 			   		= 3
*.Ext.udpApp[1].localPort 		= 1001
*.Ext.udpApp[2].localPort 		= 1002

*.Ext.udpApp[1].destAddresses = "HU1" 
*.Ext.udpApp[1].messageLength = 6000Byte

*.Ext.udpApp[2].destAddresses = "HU2" 
*.Ext.udpApp[2].messageLength = 5500Byte



#
# general default setting
#

*.*.numUdpApps 			   		= 1	# Default, wird später überschrieben


**.eth[*].mac.duplexMode = true

# EOF